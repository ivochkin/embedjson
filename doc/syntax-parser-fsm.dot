/*
 * Embedjson syntax parser Pushdown Automaton [1] transitions diagram.
 *
 * Label syntax " {, push { " means "If input symbol is {, then
 * push { onto the stack and follow this transition".
 *
 * Label syntax " ], pop [, { " means "If input symbol is ], then
 * ensure that top element of the stack is [, pop it, and if the
 * pop element of the stack is now { follow this transition".
 *
 * Transition induced by the "primitive" symbol are ones that
 * are made when one of the following tokens is encountered:
 * - string
 * - number
 * - true
 * - false
 * - null
 *
 * [1] https://en.wikipedia.org/wiki/Pushdown_automaton
 */
digraph finite_state_machine {
  node [shape = point ]; entry

  node [shape=doublecircle label="DONE"] done;

  node [shape=circle label="EXPECT\nVALUE"] expect_value;
  node [label="EXPECT\nSTRING"] expect_string;
  node [label="EXPECT\nCOLON"] expect_colon;
  node [label="EXPECT\nOBJECT\nCOMMA"] expect_object_comma;
  node [label="EXPECT\nOBJECT\nVALUE"] expect_object_value;
  node [label="EXPECT\nARRAY\nVALUE"] expect_array_value;
  node [label="EXPECT\nARRAY\nCOMMA"] expect_array_comma;

  entry -> expect_value;

  expect_value -> expect_string [label=" {, push { "];
  expect_value -> done [label=" primitive "];
  expect_string -> expect_colon [label=" string "];
  expect_string -> done [label=" }, pop {, empty "];
  expect_string -> expect_object_comma [label=" }, pop {, { "];
  expect_string -> expect_array_comma [label=" }, pop {, [ "];
  expect_colon -> expect_object_value [label=" : "];
  expect_object_value -> expect_object_comma [label=" primitive "];
  expect_object_value -> expect_string [label=" {, push { "];
  expect_object_value -> expect_array_value [label=" [, push [ "];
  expect_object_comma -> expect_string [label=" , "];
  expect_object_comma -> done [label=" }, pop {, empty "];
  expect_object_comma -> expect_object_comma [label=" }, pop {, { "];
  expect_object_comma -> expect_array_comma [label=" }, pop {, [ "];

  expect_value -> expect_array_value [label=" [, push [ "];
  expect_array_value -> expect_array_comma [label=" primitive "];
  expect_array_value -> expect_array_value [label=" [, push [ "];
  expect_array_value -> expect_string [label= " {, push { "];
  expect_array_comma -> expect_array_value [label=" , "];
  expect_array_comma -> done [label=" ] pop [, empty "];
  expect_array_comma -> expect_array_comma [label=" ], pop [, [ "];
  expect_array_comma -> expect_object_comma [label=" ], pop [, { "];
}
